// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2023 22:50:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    generalTest
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module generalTest_vlg_sample_tst(
	baud_target,
	car_sensor,
	clk,
	global_reset,
	sampler_tx
);
input [2:0] baud_target;
input  car_sensor;
input  clk;
input  global_reset;
output sampler_tx;

reg sample;
time current_time;
always @(baud_target or car_sensor or clk or global_reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module generalTest_vlg_check_tst (
	ascii_char,
	ascii_chars,
	buffer_empty,
	clk_1hz,
	clk_baud,
	i_cnt,
	state,
	tdr,
	tdr_empty,
	tlc_state,
	tlc_state_change,
	tlc_timer,
	tsr,
	tx,
	tx_message,
	sampler_rx
);
input [6:0] ascii_char;
input [41:0] ascii_chars;
input  buffer_empty;
input  clk_1hz;
input  clk_baud;
input [3:0] i_cnt;
input  state;
input [6:0] tdr;
input  tdr_empty;
input [1:0] tlc_state;
input  tlc_state_change;
input [3:0] tlc_timer;
input [9:0] tsr;
input  tx;
input [41:0] tx_message;
input sampler_rx;

reg [6:0] ascii_char_expected;
reg [41:0] ascii_chars_expected;
reg  buffer_empty_expected;
reg  clk_1hz_expected;
reg  clk_baud_expected;
reg [3:0] i_cnt_expected;
reg  state_expected;
reg [6:0] tdr_expected;
reg  tdr_empty_expected;
reg [1:0] tlc_state_expected;
reg  tlc_state_change_expected;
reg [3:0] tlc_timer_expected;
reg [9:0] tsr_expected;
reg  tx_expected;
reg [41:0] tx_message_expected;

reg [6:0] ascii_char_prev;
reg [41:0] ascii_chars_prev;
reg  buffer_empty_prev;
reg  clk_1hz_prev;
reg  clk_baud_prev;
reg [3:0] i_cnt_prev;
reg  state_prev;
reg [6:0] tdr_prev;
reg  tdr_empty_prev;
reg [1:0] tlc_state_prev;
reg  tlc_state_change_prev;
reg [3:0] tlc_timer_prev;
reg [9:0] tsr_prev;
reg  tx_prev;
reg [41:0] tx_message_prev;

reg [6:0] ascii_char_expected_prev;
reg [41:0] ascii_chars_expected_prev;
reg  buffer_empty_expected_prev;
reg  clk_1hz_expected_prev;
reg  clk_baud_expected_prev;
reg [3:0] i_cnt_expected_prev;
reg  state_expected_prev;
reg [6:0] tdr_expected_prev;
reg  tdr_empty_expected_prev;
reg [1:0] tlc_state_expected_prev;
reg  tlc_state_change_expected_prev;
reg [3:0] tlc_timer_expected_prev;
reg [9:0] tsr_expected_prev;
reg  tx_expected_prev;
reg [41:0] tx_message_expected_prev;

reg [6:0] last_ascii_char_exp;
reg [41:0] last_ascii_chars_exp;
reg  last_buffer_empty_exp;
reg  last_clk_1hz_exp;
reg  last_clk_baud_exp;
reg [3:0] last_i_cnt_exp;
reg  last_state_exp;
reg [6:0] last_tdr_exp;
reg  last_tdr_empty_exp;
reg [1:0] last_tlc_state_exp;
reg  last_tlc_state_change_exp;
reg [3:0] last_tlc_timer_exp;
reg [9:0] last_tsr_exp;
reg  last_tx_exp;
reg [41:0] last_tx_message_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	ascii_char_prev = ascii_char;
	ascii_chars_prev = ascii_chars;
	buffer_empty_prev = buffer_empty;
	clk_1hz_prev = clk_1hz;
	clk_baud_prev = clk_baud;
	i_cnt_prev = i_cnt;
	state_prev = state;
	tdr_prev = tdr;
	tdr_empty_prev = tdr_empty;
	tlc_state_prev = tlc_state;
	tlc_state_change_prev = tlc_state_change;
	tlc_timer_prev = tlc_timer;
	tsr_prev = tsr;
	tx_prev = tx;
	tx_message_prev = tx_message;
end

// update expected /o prevs

always @(trigger)
begin
	ascii_char_expected_prev = ascii_char_expected;
	ascii_chars_expected_prev = ascii_chars_expected;
	buffer_empty_expected_prev = buffer_empty_expected;
	clk_1hz_expected_prev = clk_1hz_expected;
	clk_baud_expected_prev = clk_baud_expected;
	i_cnt_expected_prev = i_cnt_expected;
	state_expected_prev = state_expected;
	tdr_expected_prev = tdr_expected;
	tdr_empty_expected_prev = tdr_empty_expected;
	tlc_state_expected_prev = tlc_state_expected;
	tlc_state_change_expected_prev = tlc_state_change_expected;
	tlc_timer_expected_prev = tlc_timer_expected;
	tsr_expected_prev = tsr_expected;
	tx_expected_prev = tx_expected;
	tx_message_expected_prev = tx_message_expected;
end



// expected clk_baud
initial
begin
	clk_baud_expected = 1'bX;
end 

// expected clk_1hz
initial
begin
	clk_1hz_expected = 1'bX;
end 

// expected state
initial
begin
	state_expected = 1'bX;
end 
// expected tlc_state[ 1 ]
initial
begin
	tlc_state_expected[1] = 1'bX;
end 
// expected tlc_state[ 0 ]
initial
begin
	tlc_state_expected[0] = 1'bX;
end 
// expected tlc_timer[ 3 ]
initial
begin
	tlc_timer_expected[3] = 1'bX;
end 
// expected tlc_timer[ 2 ]
initial
begin
	tlc_timer_expected[2] = 1'bX;
end 
// expected tlc_timer[ 1 ]
initial
begin
	tlc_timer_expected[1] = 1'bX;
end 
// expected tlc_timer[ 0 ]
initial
begin
	tlc_timer_expected[0] = 1'bX;
end 

// expected tlc_state_change
initial
begin
	tlc_state_change_expected = 1'bX;
end 
// expected ascii_chars[ 41 ]
initial
begin
	ascii_chars_expected[41] = 1'bX;
end 
// expected ascii_chars[ 40 ]
initial
begin
	ascii_chars_expected[40] = 1'bX;
end 
// expected ascii_chars[ 39 ]
initial
begin
	ascii_chars_expected[39] = 1'bX;
end 
// expected ascii_chars[ 38 ]
initial
begin
	ascii_chars_expected[38] = 1'bX;
end 
// expected ascii_chars[ 37 ]
initial
begin
	ascii_chars_expected[37] = 1'bX;
end 
// expected ascii_chars[ 36 ]
initial
begin
	ascii_chars_expected[36] = 1'bX;
end 
// expected ascii_chars[ 35 ]
initial
begin
	ascii_chars_expected[35] = 1'bX;
end 
// expected ascii_chars[ 34 ]
initial
begin
	ascii_chars_expected[34] = 1'bX;
end 
// expected ascii_chars[ 33 ]
initial
begin
	ascii_chars_expected[33] = 1'bX;
end 
// expected ascii_chars[ 32 ]
initial
begin
	ascii_chars_expected[32] = 1'bX;
end 
// expected ascii_chars[ 31 ]
initial
begin
	ascii_chars_expected[31] = 1'bX;
end 
// expected ascii_chars[ 30 ]
initial
begin
	ascii_chars_expected[30] = 1'bX;
end 
// expected ascii_chars[ 29 ]
initial
begin
	ascii_chars_expected[29] = 1'bX;
end 
// expected ascii_chars[ 28 ]
initial
begin
	ascii_chars_expected[28] = 1'bX;
end 
// expected ascii_chars[ 27 ]
initial
begin
	ascii_chars_expected[27] = 1'bX;
end 
// expected ascii_chars[ 26 ]
initial
begin
	ascii_chars_expected[26] = 1'bX;
end 
// expected ascii_chars[ 25 ]
initial
begin
	ascii_chars_expected[25] = 1'bX;
end 
// expected ascii_chars[ 24 ]
initial
begin
	ascii_chars_expected[24] = 1'bX;
end 
// expected ascii_chars[ 23 ]
initial
begin
	ascii_chars_expected[23] = 1'bX;
end 
// expected ascii_chars[ 22 ]
initial
begin
	ascii_chars_expected[22] = 1'bX;
end 
// expected ascii_chars[ 21 ]
initial
begin
	ascii_chars_expected[21] = 1'bX;
end 
// expected ascii_chars[ 20 ]
initial
begin
	ascii_chars_expected[20] = 1'bX;
end 
// expected ascii_chars[ 19 ]
initial
begin
	ascii_chars_expected[19] = 1'bX;
end 
// expected ascii_chars[ 18 ]
initial
begin
	ascii_chars_expected[18] = 1'bX;
end 
// expected ascii_chars[ 17 ]
initial
begin
	ascii_chars_expected[17] = 1'bX;
end 
// expected ascii_chars[ 16 ]
initial
begin
	ascii_chars_expected[16] = 1'bX;
end 
// expected ascii_chars[ 15 ]
initial
begin
	ascii_chars_expected[15] = 1'bX;
end 
// expected ascii_chars[ 14 ]
initial
begin
	ascii_chars_expected[14] = 1'bX;
end 
// expected ascii_chars[ 13 ]
initial
begin
	ascii_chars_expected[13] = 1'bX;
end 
// expected ascii_chars[ 12 ]
initial
begin
	ascii_chars_expected[12] = 1'bX;
end 
// expected ascii_chars[ 11 ]
initial
begin
	ascii_chars_expected[11] = 1'bX;
end 
// expected ascii_chars[ 10 ]
initial
begin
	ascii_chars_expected[10] = 1'bX;
end 
// expected ascii_chars[ 9 ]
initial
begin
	ascii_chars_expected[9] = 1'bX;
end 
// expected ascii_chars[ 8 ]
initial
begin
	ascii_chars_expected[8] = 1'bX;
end 
// expected ascii_chars[ 7 ]
initial
begin
	ascii_chars_expected[7] = 1'bX;
end 
// expected ascii_chars[ 6 ]
initial
begin
	ascii_chars_expected[6] = 1'bX;
end 
// expected ascii_chars[ 5 ]
initial
begin
	ascii_chars_expected[5] = 1'bX;
end 
// expected ascii_chars[ 4 ]
initial
begin
	ascii_chars_expected[4] = 1'bX;
end 
// expected ascii_chars[ 3 ]
initial
begin
	ascii_chars_expected[3] = 1'bX;
end 
// expected ascii_chars[ 2 ]
initial
begin
	ascii_chars_expected[2] = 1'bX;
end 
// expected ascii_chars[ 1 ]
initial
begin
	ascii_chars_expected[1] = 1'bX;
end 
// expected ascii_chars[ 0 ]
initial
begin
	ascii_chars_expected[0] = 1'bX;
end 
// expected ascii_char[ 6 ]
initial
begin
	ascii_char_expected[6] = 1'bX;
end 
// expected ascii_char[ 5 ]
initial
begin
	ascii_char_expected[5] = 1'bX;
end 
// expected ascii_char[ 4 ]
initial
begin
	ascii_char_expected[4] = 1'bX;
end 
// expected ascii_char[ 3 ]
initial
begin
	ascii_char_expected[3] = 1'bX;
end 
// expected ascii_char[ 2 ]
initial
begin
	ascii_char_expected[2] = 1'bX;
end 
// expected ascii_char[ 1 ]
initial
begin
	ascii_char_expected[1] = 1'bX;
end 
// expected ascii_char[ 0 ]
initial
begin
	ascii_char_expected[0] = 1'bX;
end 

// expected buffer_empty
initial
begin
	buffer_empty_expected = 1'bX;
end 
// expected i_cnt[ 3 ]
initial
begin
	i_cnt_expected[3] = 1'bX;
end 
// expected i_cnt[ 2 ]
initial
begin
	i_cnt_expected[2] = 1'bX;
end 
// expected i_cnt[ 1 ]
initial
begin
	i_cnt_expected[1] = 1'bX;
end 
// expected i_cnt[ 0 ]
initial
begin
	i_cnt_expected[0] = 1'bX;
end 
// expected tx_message[ 41 ]
initial
begin
	tx_message_expected[41] = 1'bX;
end 
// expected tx_message[ 40 ]
initial
begin
	tx_message_expected[40] = 1'bX;
end 
// expected tx_message[ 39 ]
initial
begin
	tx_message_expected[39] = 1'bX;
end 
// expected tx_message[ 38 ]
initial
begin
	tx_message_expected[38] = 1'bX;
end 
// expected tx_message[ 37 ]
initial
begin
	tx_message_expected[37] = 1'bX;
end 
// expected tx_message[ 36 ]
initial
begin
	tx_message_expected[36] = 1'bX;
end 
// expected tx_message[ 35 ]
initial
begin
	tx_message_expected[35] = 1'bX;
end 
// expected tx_message[ 34 ]
initial
begin
	tx_message_expected[34] = 1'bX;
end 
// expected tx_message[ 33 ]
initial
begin
	tx_message_expected[33] = 1'bX;
end 
// expected tx_message[ 32 ]
initial
begin
	tx_message_expected[32] = 1'bX;
end 
// expected tx_message[ 31 ]
initial
begin
	tx_message_expected[31] = 1'bX;
end 
// expected tx_message[ 30 ]
initial
begin
	tx_message_expected[30] = 1'bX;
end 
// expected tx_message[ 29 ]
initial
begin
	tx_message_expected[29] = 1'bX;
end 
// expected tx_message[ 28 ]
initial
begin
	tx_message_expected[28] = 1'bX;
end 
// expected tx_message[ 27 ]
initial
begin
	tx_message_expected[27] = 1'bX;
end 
// expected tx_message[ 26 ]
initial
begin
	tx_message_expected[26] = 1'bX;
end 
// expected tx_message[ 25 ]
initial
begin
	tx_message_expected[25] = 1'bX;
end 
// expected tx_message[ 24 ]
initial
begin
	tx_message_expected[24] = 1'bX;
end 
// expected tx_message[ 23 ]
initial
begin
	tx_message_expected[23] = 1'bX;
end 
// expected tx_message[ 22 ]
initial
begin
	tx_message_expected[22] = 1'bX;
end 
// expected tx_message[ 21 ]
initial
begin
	tx_message_expected[21] = 1'bX;
end 
// expected tx_message[ 20 ]
initial
begin
	tx_message_expected[20] = 1'bX;
end 
// expected tx_message[ 19 ]
initial
begin
	tx_message_expected[19] = 1'bX;
end 
// expected tx_message[ 18 ]
initial
begin
	tx_message_expected[18] = 1'bX;
end 
// expected tx_message[ 17 ]
initial
begin
	tx_message_expected[17] = 1'bX;
end 
// expected tx_message[ 16 ]
initial
begin
	tx_message_expected[16] = 1'bX;
end 
// expected tx_message[ 15 ]
initial
begin
	tx_message_expected[15] = 1'bX;
end 
// expected tx_message[ 14 ]
initial
begin
	tx_message_expected[14] = 1'bX;
end 
// expected tx_message[ 13 ]
initial
begin
	tx_message_expected[13] = 1'bX;
end 
// expected tx_message[ 12 ]
initial
begin
	tx_message_expected[12] = 1'bX;
end 
// expected tx_message[ 11 ]
initial
begin
	tx_message_expected[11] = 1'bX;
end 
// expected tx_message[ 10 ]
initial
begin
	tx_message_expected[10] = 1'bX;
end 
// expected tx_message[ 9 ]
initial
begin
	tx_message_expected[9] = 1'bX;
end 
// expected tx_message[ 8 ]
initial
begin
	tx_message_expected[8] = 1'bX;
end 
// expected tx_message[ 7 ]
initial
begin
	tx_message_expected[7] = 1'bX;
end 
// expected tx_message[ 6 ]
initial
begin
	tx_message_expected[6] = 1'bX;
end 
// expected tx_message[ 5 ]
initial
begin
	tx_message_expected[5] = 1'bX;
end 
// expected tx_message[ 4 ]
initial
begin
	tx_message_expected[4] = 1'bX;
end 
// expected tx_message[ 3 ]
initial
begin
	tx_message_expected[3] = 1'bX;
end 
// expected tx_message[ 2 ]
initial
begin
	tx_message_expected[2] = 1'bX;
end 
// expected tx_message[ 1 ]
initial
begin
	tx_message_expected[1] = 1'bX;
end 
// expected tx_message[ 0 ]
initial
begin
	tx_message_expected[0] = 1'bX;
end 
// expected tdr[ 6 ]
initial
begin
	tdr_expected[6] = 1'bX;
end 
// expected tdr[ 5 ]
initial
begin
	tdr_expected[5] = 1'bX;
end 
// expected tdr[ 4 ]
initial
begin
	tdr_expected[4] = 1'bX;
end 
// expected tdr[ 3 ]
initial
begin
	tdr_expected[3] = 1'bX;
end 
// expected tdr[ 2 ]
initial
begin
	tdr_expected[2] = 1'bX;
end 
// expected tdr[ 1 ]
initial
begin
	tdr_expected[1] = 1'bX;
end 
// expected tdr[ 0 ]
initial
begin
	tdr_expected[0] = 1'bX;
end 

// expected tdr_empty
initial
begin
	tdr_empty_expected = 1'bX;
end 
// expected tsr[ 9 ]
initial
begin
	tsr_expected[9] = 1'bX;
end 
// expected tsr[ 8 ]
initial
begin
	tsr_expected[8] = 1'bX;
end 
// expected tsr[ 7 ]
initial
begin
	tsr_expected[7] = 1'bX;
end 
// expected tsr[ 6 ]
initial
begin
	tsr_expected[6] = 1'bX;
end 
// expected tsr[ 5 ]
initial
begin
	tsr_expected[5] = 1'bX;
end 
// expected tsr[ 4 ]
initial
begin
	tsr_expected[4] = 1'bX;
end 
// expected tsr[ 3 ]
initial
begin
	tsr_expected[3] = 1'bX;
end 
// expected tsr[ 2 ]
initial
begin
	tsr_expected[2] = 1'bX;
end 
// expected tsr[ 1 ]
initial
begin
	tsr_expected[1] = 1'bX;
end 
// expected tsr[ 0 ]
initial
begin
	tsr_expected[0] = 1'bX;
end 

// expected tx
initial
begin
	tx_expected = 1'bX;
end 
// generate trigger
always @(ascii_char_expected or ascii_char or ascii_chars_expected or ascii_chars or buffer_empty_expected or buffer_empty or clk_1hz_expected or clk_1hz or clk_baud_expected or clk_baud or i_cnt_expected or i_cnt or state_expected or state or tdr_expected or tdr or tdr_empty_expected or tdr_empty or tlc_state_expected or tlc_state or tlc_state_change_expected or tlc_state_change or tlc_timer_expected or tlc_timer or tsr_expected or tsr or tx_expected or tx or tx_message_expected or tx_message)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ascii_char = %b | expected ascii_chars = %b | expected buffer_empty = %b | expected clk_1hz = %b | expected clk_baud = %b | expected i_cnt = %b | expected state = %b | expected tdr = %b | expected tdr_empty = %b | expected tlc_state = %b | expected tlc_state_change = %b | expected tlc_timer = %b | expected tsr = %b | expected tx = %b | expected tx_message = %b | ",ascii_char_expected_prev,ascii_chars_expected_prev,buffer_empty_expected_prev,clk_1hz_expected_prev,clk_baud_expected_prev,i_cnt_expected_prev,state_expected_prev,tdr_expected_prev,tdr_empty_expected_prev,tlc_state_expected_prev,tlc_state_change_expected_prev,tlc_timer_expected_prev,tsr_expected_prev,tx_expected_prev,tx_message_expected_prev);
	$display("| real ascii_char = %b | real ascii_chars = %b | real buffer_empty = %b | real clk_1hz = %b | real clk_baud = %b | real i_cnt = %b | real state = %b | real tdr = %b | real tdr_empty = %b | real tlc_state = %b | real tlc_state_change = %b | real tlc_timer = %b | real tsr = %b | real tx = %b | real tx_message = %b | ",ascii_char_prev,ascii_chars_prev,buffer_empty_prev,clk_1hz_prev,clk_baud_prev,i_cnt_prev,state_prev,tdr_prev,tdr_empty_prev,tlc_state_prev,tlc_state_change_prev,tlc_timer_prev,tsr_prev,tx_prev,tx_message_prev);
`endif
	if (
		( ascii_char_expected_prev[0] !== 1'bx ) && ( ascii_char_prev[0] !== ascii_char_expected_prev[0] )
		&& ((ascii_char_expected_prev[0] !== last_ascii_char_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_char[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_char_expected_prev);
		$display ("     Real value = %b", ascii_char_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ascii_char_exp[0] = ascii_char_expected_prev[0];
	end
	if (
		( ascii_char_expected_prev[1] !== 1'bx ) && ( ascii_char_prev[1] !== ascii_char_expected_prev[1] )
		&& ((ascii_char_expected_prev[1] !== last_ascii_char_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_char[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_char_expected_prev);
		$display ("     Real value = %b", ascii_char_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ascii_char_exp[1] = ascii_char_expected_prev[1];
	end
	if (
		( ascii_char_expected_prev[2] !== 1'bx ) && ( ascii_char_prev[2] !== ascii_char_expected_prev[2] )
		&& ((ascii_char_expected_prev[2] !== last_ascii_char_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_char[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_char_expected_prev);
		$display ("     Real value = %b", ascii_char_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ascii_char_exp[2] = ascii_char_expected_prev[2];
	end
	if (
		( ascii_char_expected_prev[3] !== 1'bx ) && ( ascii_char_prev[3] !== ascii_char_expected_prev[3] )
		&& ((ascii_char_expected_prev[3] !== last_ascii_char_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_char[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_char_expected_prev);
		$display ("     Real value = %b", ascii_char_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ascii_char_exp[3] = ascii_char_expected_prev[3];
	end
	if (
		( ascii_char_expected_prev[4] !== 1'bx ) && ( ascii_char_prev[4] !== ascii_char_expected_prev[4] )
		&& ((ascii_char_expected_prev[4] !== last_ascii_char_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_char[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_char_expected_prev);
		$display ("     Real value = %b", ascii_char_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ascii_char_exp[4] = ascii_char_expected_prev[4];
	end
	if (
		( ascii_char_expected_prev[5] !== 1'bx ) && ( ascii_char_prev[5] !== ascii_char_expected_prev[5] )
		&& ((ascii_char_expected_prev[5] !== last_ascii_char_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_char[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_char_expected_prev);
		$display ("     Real value = %b", ascii_char_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ascii_char_exp[5] = ascii_char_expected_prev[5];
	end
	if (
		( ascii_char_expected_prev[6] !== 1'bx ) && ( ascii_char_prev[6] !== ascii_char_expected_prev[6] )
		&& ((ascii_char_expected_prev[6] !== last_ascii_char_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_char[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_char_expected_prev);
		$display ("     Real value = %b", ascii_char_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ascii_char_exp[6] = ascii_char_expected_prev[6];
	end
	if (
		( ascii_chars_expected_prev[0] !== 1'bx ) && ( ascii_chars_prev[0] !== ascii_chars_expected_prev[0] )
		&& ((ascii_chars_expected_prev[0] !== last_ascii_chars_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[0] = ascii_chars_expected_prev[0];
	end
	if (
		( ascii_chars_expected_prev[1] !== 1'bx ) && ( ascii_chars_prev[1] !== ascii_chars_expected_prev[1] )
		&& ((ascii_chars_expected_prev[1] !== last_ascii_chars_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[1] = ascii_chars_expected_prev[1];
	end
	if (
		( ascii_chars_expected_prev[2] !== 1'bx ) && ( ascii_chars_prev[2] !== ascii_chars_expected_prev[2] )
		&& ((ascii_chars_expected_prev[2] !== last_ascii_chars_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[2] = ascii_chars_expected_prev[2];
	end
	if (
		( ascii_chars_expected_prev[3] !== 1'bx ) && ( ascii_chars_prev[3] !== ascii_chars_expected_prev[3] )
		&& ((ascii_chars_expected_prev[3] !== last_ascii_chars_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[3] = ascii_chars_expected_prev[3];
	end
	if (
		( ascii_chars_expected_prev[4] !== 1'bx ) && ( ascii_chars_prev[4] !== ascii_chars_expected_prev[4] )
		&& ((ascii_chars_expected_prev[4] !== last_ascii_chars_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[4] = ascii_chars_expected_prev[4];
	end
	if (
		( ascii_chars_expected_prev[5] !== 1'bx ) && ( ascii_chars_prev[5] !== ascii_chars_expected_prev[5] )
		&& ((ascii_chars_expected_prev[5] !== last_ascii_chars_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[5] = ascii_chars_expected_prev[5];
	end
	if (
		( ascii_chars_expected_prev[6] !== 1'bx ) && ( ascii_chars_prev[6] !== ascii_chars_expected_prev[6] )
		&& ((ascii_chars_expected_prev[6] !== last_ascii_chars_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[6] = ascii_chars_expected_prev[6];
	end
	if (
		( ascii_chars_expected_prev[7] !== 1'bx ) && ( ascii_chars_prev[7] !== ascii_chars_expected_prev[7] )
		&& ((ascii_chars_expected_prev[7] !== last_ascii_chars_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[7] = ascii_chars_expected_prev[7];
	end
	if (
		( ascii_chars_expected_prev[8] !== 1'bx ) && ( ascii_chars_prev[8] !== ascii_chars_expected_prev[8] )
		&& ((ascii_chars_expected_prev[8] !== last_ascii_chars_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[8] = ascii_chars_expected_prev[8];
	end
	if (
		( ascii_chars_expected_prev[9] !== 1'bx ) && ( ascii_chars_prev[9] !== ascii_chars_expected_prev[9] )
		&& ((ascii_chars_expected_prev[9] !== last_ascii_chars_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[9] = ascii_chars_expected_prev[9];
	end
	if (
		( ascii_chars_expected_prev[10] !== 1'bx ) && ( ascii_chars_prev[10] !== ascii_chars_expected_prev[10] )
		&& ((ascii_chars_expected_prev[10] !== last_ascii_chars_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[10] = ascii_chars_expected_prev[10];
	end
	if (
		( ascii_chars_expected_prev[11] !== 1'bx ) && ( ascii_chars_prev[11] !== ascii_chars_expected_prev[11] )
		&& ((ascii_chars_expected_prev[11] !== last_ascii_chars_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[11] = ascii_chars_expected_prev[11];
	end
	if (
		( ascii_chars_expected_prev[12] !== 1'bx ) && ( ascii_chars_prev[12] !== ascii_chars_expected_prev[12] )
		&& ((ascii_chars_expected_prev[12] !== last_ascii_chars_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[12] = ascii_chars_expected_prev[12];
	end
	if (
		( ascii_chars_expected_prev[13] !== 1'bx ) && ( ascii_chars_prev[13] !== ascii_chars_expected_prev[13] )
		&& ((ascii_chars_expected_prev[13] !== last_ascii_chars_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[13] = ascii_chars_expected_prev[13];
	end
	if (
		( ascii_chars_expected_prev[14] !== 1'bx ) && ( ascii_chars_prev[14] !== ascii_chars_expected_prev[14] )
		&& ((ascii_chars_expected_prev[14] !== last_ascii_chars_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[14] = ascii_chars_expected_prev[14];
	end
	if (
		( ascii_chars_expected_prev[15] !== 1'bx ) && ( ascii_chars_prev[15] !== ascii_chars_expected_prev[15] )
		&& ((ascii_chars_expected_prev[15] !== last_ascii_chars_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[15] = ascii_chars_expected_prev[15];
	end
	if (
		( ascii_chars_expected_prev[16] !== 1'bx ) && ( ascii_chars_prev[16] !== ascii_chars_expected_prev[16] )
		&& ((ascii_chars_expected_prev[16] !== last_ascii_chars_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[16] = ascii_chars_expected_prev[16];
	end
	if (
		( ascii_chars_expected_prev[17] !== 1'bx ) && ( ascii_chars_prev[17] !== ascii_chars_expected_prev[17] )
		&& ((ascii_chars_expected_prev[17] !== last_ascii_chars_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[17] = ascii_chars_expected_prev[17];
	end
	if (
		( ascii_chars_expected_prev[18] !== 1'bx ) && ( ascii_chars_prev[18] !== ascii_chars_expected_prev[18] )
		&& ((ascii_chars_expected_prev[18] !== last_ascii_chars_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[18] = ascii_chars_expected_prev[18];
	end
	if (
		( ascii_chars_expected_prev[19] !== 1'bx ) && ( ascii_chars_prev[19] !== ascii_chars_expected_prev[19] )
		&& ((ascii_chars_expected_prev[19] !== last_ascii_chars_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[19] = ascii_chars_expected_prev[19];
	end
	if (
		( ascii_chars_expected_prev[20] !== 1'bx ) && ( ascii_chars_prev[20] !== ascii_chars_expected_prev[20] )
		&& ((ascii_chars_expected_prev[20] !== last_ascii_chars_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[20] = ascii_chars_expected_prev[20];
	end
	if (
		( ascii_chars_expected_prev[21] !== 1'bx ) && ( ascii_chars_prev[21] !== ascii_chars_expected_prev[21] )
		&& ((ascii_chars_expected_prev[21] !== last_ascii_chars_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[21] = ascii_chars_expected_prev[21];
	end
	if (
		( ascii_chars_expected_prev[22] !== 1'bx ) && ( ascii_chars_prev[22] !== ascii_chars_expected_prev[22] )
		&& ((ascii_chars_expected_prev[22] !== last_ascii_chars_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[22] = ascii_chars_expected_prev[22];
	end
	if (
		( ascii_chars_expected_prev[23] !== 1'bx ) && ( ascii_chars_prev[23] !== ascii_chars_expected_prev[23] )
		&& ((ascii_chars_expected_prev[23] !== last_ascii_chars_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[23] = ascii_chars_expected_prev[23];
	end
	if (
		( ascii_chars_expected_prev[24] !== 1'bx ) && ( ascii_chars_prev[24] !== ascii_chars_expected_prev[24] )
		&& ((ascii_chars_expected_prev[24] !== last_ascii_chars_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[24] = ascii_chars_expected_prev[24];
	end
	if (
		( ascii_chars_expected_prev[25] !== 1'bx ) && ( ascii_chars_prev[25] !== ascii_chars_expected_prev[25] )
		&& ((ascii_chars_expected_prev[25] !== last_ascii_chars_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[25] = ascii_chars_expected_prev[25];
	end
	if (
		( ascii_chars_expected_prev[26] !== 1'bx ) && ( ascii_chars_prev[26] !== ascii_chars_expected_prev[26] )
		&& ((ascii_chars_expected_prev[26] !== last_ascii_chars_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[26] = ascii_chars_expected_prev[26];
	end
	if (
		( ascii_chars_expected_prev[27] !== 1'bx ) && ( ascii_chars_prev[27] !== ascii_chars_expected_prev[27] )
		&& ((ascii_chars_expected_prev[27] !== last_ascii_chars_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[27] = ascii_chars_expected_prev[27];
	end
	if (
		( ascii_chars_expected_prev[28] !== 1'bx ) && ( ascii_chars_prev[28] !== ascii_chars_expected_prev[28] )
		&& ((ascii_chars_expected_prev[28] !== last_ascii_chars_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[28] = ascii_chars_expected_prev[28];
	end
	if (
		( ascii_chars_expected_prev[29] !== 1'bx ) && ( ascii_chars_prev[29] !== ascii_chars_expected_prev[29] )
		&& ((ascii_chars_expected_prev[29] !== last_ascii_chars_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[29] = ascii_chars_expected_prev[29];
	end
	if (
		( ascii_chars_expected_prev[30] !== 1'bx ) && ( ascii_chars_prev[30] !== ascii_chars_expected_prev[30] )
		&& ((ascii_chars_expected_prev[30] !== last_ascii_chars_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[30] = ascii_chars_expected_prev[30];
	end
	if (
		( ascii_chars_expected_prev[31] !== 1'bx ) && ( ascii_chars_prev[31] !== ascii_chars_expected_prev[31] )
		&& ((ascii_chars_expected_prev[31] !== last_ascii_chars_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[31] = ascii_chars_expected_prev[31];
	end
	if (
		( ascii_chars_expected_prev[32] !== 1'bx ) && ( ascii_chars_prev[32] !== ascii_chars_expected_prev[32] )
		&& ((ascii_chars_expected_prev[32] !== last_ascii_chars_exp[32]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[32] = ascii_chars_expected_prev[32];
	end
	if (
		( ascii_chars_expected_prev[33] !== 1'bx ) && ( ascii_chars_prev[33] !== ascii_chars_expected_prev[33] )
		&& ((ascii_chars_expected_prev[33] !== last_ascii_chars_exp[33]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[33] = ascii_chars_expected_prev[33];
	end
	if (
		( ascii_chars_expected_prev[34] !== 1'bx ) && ( ascii_chars_prev[34] !== ascii_chars_expected_prev[34] )
		&& ((ascii_chars_expected_prev[34] !== last_ascii_chars_exp[34]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[34] = ascii_chars_expected_prev[34];
	end
	if (
		( ascii_chars_expected_prev[35] !== 1'bx ) && ( ascii_chars_prev[35] !== ascii_chars_expected_prev[35] )
		&& ((ascii_chars_expected_prev[35] !== last_ascii_chars_exp[35]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[35] = ascii_chars_expected_prev[35];
	end
	if (
		( ascii_chars_expected_prev[36] !== 1'bx ) && ( ascii_chars_prev[36] !== ascii_chars_expected_prev[36] )
		&& ((ascii_chars_expected_prev[36] !== last_ascii_chars_exp[36]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[36] = ascii_chars_expected_prev[36];
	end
	if (
		( ascii_chars_expected_prev[37] !== 1'bx ) && ( ascii_chars_prev[37] !== ascii_chars_expected_prev[37] )
		&& ((ascii_chars_expected_prev[37] !== last_ascii_chars_exp[37]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[37] = ascii_chars_expected_prev[37];
	end
	if (
		( ascii_chars_expected_prev[38] !== 1'bx ) && ( ascii_chars_prev[38] !== ascii_chars_expected_prev[38] )
		&& ((ascii_chars_expected_prev[38] !== last_ascii_chars_exp[38]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[38] = ascii_chars_expected_prev[38];
	end
	if (
		( ascii_chars_expected_prev[39] !== 1'bx ) && ( ascii_chars_prev[39] !== ascii_chars_expected_prev[39] )
		&& ((ascii_chars_expected_prev[39] !== last_ascii_chars_exp[39]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[39] = ascii_chars_expected_prev[39];
	end
	if (
		( ascii_chars_expected_prev[40] !== 1'bx ) && ( ascii_chars_prev[40] !== ascii_chars_expected_prev[40] )
		&& ((ascii_chars_expected_prev[40] !== last_ascii_chars_exp[40]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[40] = ascii_chars_expected_prev[40];
	end
	if (
		( ascii_chars_expected_prev[41] !== 1'bx ) && ( ascii_chars_prev[41] !== ascii_chars_expected_prev[41] )
		&& ((ascii_chars_expected_prev[41] !== last_ascii_chars_exp[41]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ascii_chars[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ascii_chars_expected_prev);
		$display ("     Real value = %b", ascii_chars_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ascii_chars_exp[41] = ascii_chars_expected_prev[41];
	end
	if (
		( buffer_empty_expected_prev !== 1'bx ) && ( buffer_empty_prev !== buffer_empty_expected_prev )
		&& ((buffer_empty_expected_prev !== last_buffer_empty_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port buffer_empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", buffer_empty_expected_prev);
		$display ("     Real value = %b", buffer_empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_buffer_empty_exp = buffer_empty_expected_prev;
	end
	if (
		( clk_1hz_expected_prev !== 1'bx ) && ( clk_1hz_prev !== clk_1hz_expected_prev )
		&& ((clk_1hz_expected_prev !== last_clk_1hz_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_1hz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_1hz_expected_prev);
		$display ("     Real value = %b", clk_1hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_clk_1hz_exp = clk_1hz_expected_prev;
	end
	if (
		( clk_baud_expected_prev !== 1'bx ) && ( clk_baud_prev !== clk_baud_expected_prev )
		&& ((clk_baud_expected_prev !== last_clk_baud_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_baud :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_baud_expected_prev);
		$display ("     Real value = %b", clk_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_clk_baud_exp = clk_baud_expected_prev;
	end
	if (
		( i_cnt_expected_prev[0] !== 1'bx ) && ( i_cnt_prev[0] !== i_cnt_expected_prev[0] )
		&& ((i_cnt_expected_prev[0] !== last_i_cnt_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_cnt_expected_prev);
		$display ("     Real value = %b", i_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_i_cnt_exp[0] = i_cnt_expected_prev[0];
	end
	if (
		( i_cnt_expected_prev[1] !== 1'bx ) && ( i_cnt_prev[1] !== i_cnt_expected_prev[1] )
		&& ((i_cnt_expected_prev[1] !== last_i_cnt_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_cnt_expected_prev);
		$display ("     Real value = %b", i_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_i_cnt_exp[1] = i_cnt_expected_prev[1];
	end
	if (
		( i_cnt_expected_prev[2] !== 1'bx ) && ( i_cnt_prev[2] !== i_cnt_expected_prev[2] )
		&& ((i_cnt_expected_prev[2] !== last_i_cnt_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_cnt_expected_prev);
		$display ("     Real value = %b", i_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_i_cnt_exp[2] = i_cnt_expected_prev[2];
	end
	if (
		( i_cnt_expected_prev[3] !== 1'bx ) && ( i_cnt_prev[3] !== i_cnt_expected_prev[3] )
		&& ((i_cnt_expected_prev[3] !== last_i_cnt_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_cnt_expected_prev);
		$display ("     Real value = %b", i_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_i_cnt_exp[3] = i_cnt_expected_prev[3];
	end
	if (
		( state_expected_prev !== 1'bx ) && ( state_prev !== state_expected_prev )
		&& ((state_expected_prev !== last_state_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp = state_expected_prev;
	end
	if (
		( tdr_expected_prev[0] !== 1'bx ) && ( tdr_prev[0] !== tdr_expected_prev[0] )
		&& ((tdr_expected_prev[0] !== last_tdr_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tdr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tdr_expected_prev);
		$display ("     Real value = %b", tdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tdr_exp[0] = tdr_expected_prev[0];
	end
	if (
		( tdr_expected_prev[1] !== 1'bx ) && ( tdr_prev[1] !== tdr_expected_prev[1] )
		&& ((tdr_expected_prev[1] !== last_tdr_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tdr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tdr_expected_prev);
		$display ("     Real value = %b", tdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tdr_exp[1] = tdr_expected_prev[1];
	end
	if (
		( tdr_expected_prev[2] !== 1'bx ) && ( tdr_prev[2] !== tdr_expected_prev[2] )
		&& ((tdr_expected_prev[2] !== last_tdr_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tdr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tdr_expected_prev);
		$display ("     Real value = %b", tdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tdr_exp[2] = tdr_expected_prev[2];
	end
	if (
		( tdr_expected_prev[3] !== 1'bx ) && ( tdr_prev[3] !== tdr_expected_prev[3] )
		&& ((tdr_expected_prev[3] !== last_tdr_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tdr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tdr_expected_prev);
		$display ("     Real value = %b", tdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tdr_exp[3] = tdr_expected_prev[3];
	end
	if (
		( tdr_expected_prev[4] !== 1'bx ) && ( tdr_prev[4] !== tdr_expected_prev[4] )
		&& ((tdr_expected_prev[4] !== last_tdr_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tdr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tdr_expected_prev);
		$display ("     Real value = %b", tdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tdr_exp[4] = tdr_expected_prev[4];
	end
	if (
		( tdr_expected_prev[5] !== 1'bx ) && ( tdr_prev[5] !== tdr_expected_prev[5] )
		&& ((tdr_expected_prev[5] !== last_tdr_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tdr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tdr_expected_prev);
		$display ("     Real value = %b", tdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tdr_exp[5] = tdr_expected_prev[5];
	end
	if (
		( tdr_expected_prev[6] !== 1'bx ) && ( tdr_prev[6] !== tdr_expected_prev[6] )
		&& ((tdr_expected_prev[6] !== last_tdr_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tdr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tdr_expected_prev);
		$display ("     Real value = %b", tdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_tdr_exp[6] = tdr_expected_prev[6];
	end
	if (
		( tdr_empty_expected_prev !== 1'bx ) && ( tdr_empty_prev !== tdr_empty_expected_prev )
		&& ((tdr_empty_expected_prev !== last_tdr_empty_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tdr_empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tdr_empty_expected_prev);
		$display ("     Real value = %b", tdr_empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_tdr_empty_exp = tdr_empty_expected_prev;
	end
	if (
		( tlc_state_expected_prev[0] !== 1'bx ) && ( tlc_state_prev[0] !== tlc_state_expected_prev[0] )
		&& ((tlc_state_expected_prev[0] !== last_tlc_state_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tlc_state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tlc_state_expected_prev);
		$display ("     Real value = %b", tlc_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_tlc_state_exp[0] = tlc_state_expected_prev[0];
	end
	if (
		( tlc_state_expected_prev[1] !== 1'bx ) && ( tlc_state_prev[1] !== tlc_state_expected_prev[1] )
		&& ((tlc_state_expected_prev[1] !== last_tlc_state_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tlc_state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tlc_state_expected_prev);
		$display ("     Real value = %b", tlc_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_tlc_state_exp[1] = tlc_state_expected_prev[1];
	end
	if (
		( tlc_state_change_expected_prev !== 1'bx ) && ( tlc_state_change_prev !== tlc_state_change_expected_prev )
		&& ((tlc_state_change_expected_prev !== last_tlc_state_change_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tlc_state_change :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tlc_state_change_expected_prev);
		$display ("     Real value = %b", tlc_state_change_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_tlc_state_change_exp = tlc_state_change_expected_prev;
	end
	if (
		( tlc_timer_expected_prev[0] !== 1'bx ) && ( tlc_timer_prev[0] !== tlc_timer_expected_prev[0] )
		&& ((tlc_timer_expected_prev[0] !== last_tlc_timer_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tlc_timer[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tlc_timer_expected_prev);
		$display ("     Real value = %b", tlc_timer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tlc_timer_exp[0] = tlc_timer_expected_prev[0];
	end
	if (
		( tlc_timer_expected_prev[1] !== 1'bx ) && ( tlc_timer_prev[1] !== tlc_timer_expected_prev[1] )
		&& ((tlc_timer_expected_prev[1] !== last_tlc_timer_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tlc_timer[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tlc_timer_expected_prev);
		$display ("     Real value = %b", tlc_timer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tlc_timer_exp[1] = tlc_timer_expected_prev[1];
	end
	if (
		( tlc_timer_expected_prev[2] !== 1'bx ) && ( tlc_timer_prev[2] !== tlc_timer_expected_prev[2] )
		&& ((tlc_timer_expected_prev[2] !== last_tlc_timer_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tlc_timer[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tlc_timer_expected_prev);
		$display ("     Real value = %b", tlc_timer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tlc_timer_exp[2] = tlc_timer_expected_prev[2];
	end
	if (
		( tlc_timer_expected_prev[3] !== 1'bx ) && ( tlc_timer_prev[3] !== tlc_timer_expected_prev[3] )
		&& ((tlc_timer_expected_prev[3] !== last_tlc_timer_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tlc_timer[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tlc_timer_expected_prev);
		$display ("     Real value = %b", tlc_timer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tlc_timer_exp[3] = tlc_timer_expected_prev[3];
	end
	if (
		( tsr_expected_prev[0] !== 1'bx ) && ( tsr_prev[0] !== tsr_expected_prev[0] )
		&& ((tsr_expected_prev[0] !== last_tsr_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tsr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tsr_expected_prev);
		$display ("     Real value = %b", tsr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tsr_exp[0] = tsr_expected_prev[0];
	end
	if (
		( tsr_expected_prev[1] !== 1'bx ) && ( tsr_prev[1] !== tsr_expected_prev[1] )
		&& ((tsr_expected_prev[1] !== last_tsr_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tsr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tsr_expected_prev);
		$display ("     Real value = %b", tsr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tsr_exp[1] = tsr_expected_prev[1];
	end
	if (
		( tsr_expected_prev[2] !== 1'bx ) && ( tsr_prev[2] !== tsr_expected_prev[2] )
		&& ((tsr_expected_prev[2] !== last_tsr_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tsr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tsr_expected_prev);
		$display ("     Real value = %b", tsr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tsr_exp[2] = tsr_expected_prev[2];
	end
	if (
		( tsr_expected_prev[3] !== 1'bx ) && ( tsr_prev[3] !== tsr_expected_prev[3] )
		&& ((tsr_expected_prev[3] !== last_tsr_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tsr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tsr_expected_prev);
		$display ("     Real value = %b", tsr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tsr_exp[3] = tsr_expected_prev[3];
	end
	if (
		( tsr_expected_prev[4] !== 1'bx ) && ( tsr_prev[4] !== tsr_expected_prev[4] )
		&& ((tsr_expected_prev[4] !== last_tsr_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tsr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tsr_expected_prev);
		$display ("     Real value = %b", tsr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tsr_exp[4] = tsr_expected_prev[4];
	end
	if (
		( tsr_expected_prev[5] !== 1'bx ) && ( tsr_prev[5] !== tsr_expected_prev[5] )
		&& ((tsr_expected_prev[5] !== last_tsr_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tsr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tsr_expected_prev);
		$display ("     Real value = %b", tsr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tsr_exp[5] = tsr_expected_prev[5];
	end
	if (
		( tsr_expected_prev[6] !== 1'bx ) && ( tsr_prev[6] !== tsr_expected_prev[6] )
		&& ((tsr_expected_prev[6] !== last_tsr_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tsr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tsr_expected_prev);
		$display ("     Real value = %b", tsr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tsr_exp[6] = tsr_expected_prev[6];
	end
	if (
		( tsr_expected_prev[7] !== 1'bx ) && ( tsr_prev[7] !== tsr_expected_prev[7] )
		&& ((tsr_expected_prev[7] !== last_tsr_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tsr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tsr_expected_prev);
		$display ("     Real value = %b", tsr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tsr_exp[7] = tsr_expected_prev[7];
	end
	if (
		( tsr_expected_prev[8] !== 1'bx ) && ( tsr_prev[8] !== tsr_expected_prev[8] )
		&& ((tsr_expected_prev[8] !== last_tsr_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tsr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tsr_expected_prev);
		$display ("     Real value = %b", tsr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tsr_exp[8] = tsr_expected_prev[8];
	end
	if (
		( tsr_expected_prev[9] !== 1'bx ) && ( tsr_prev[9] !== tsr_expected_prev[9] )
		&& ((tsr_expected_prev[9] !== last_tsr_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tsr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tsr_expected_prev);
		$display ("     Real value = %b", tsr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_tsr_exp[9] = tsr_expected_prev[9];
	end
	if (
		( tx_expected_prev !== 1'bx ) && ( tx_prev !== tx_expected_prev )
		&& ((tx_expected_prev !== last_tx_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_expected_prev);
		$display ("     Real value = %b", tx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_tx_exp = tx_expected_prev;
	end
	if (
		( tx_message_expected_prev[0] !== 1'bx ) && ( tx_message_prev[0] !== tx_message_expected_prev[0] )
		&& ((tx_message_expected_prev[0] !== last_tx_message_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[0] = tx_message_expected_prev[0];
	end
	if (
		( tx_message_expected_prev[1] !== 1'bx ) && ( tx_message_prev[1] !== tx_message_expected_prev[1] )
		&& ((tx_message_expected_prev[1] !== last_tx_message_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[1] = tx_message_expected_prev[1];
	end
	if (
		( tx_message_expected_prev[2] !== 1'bx ) && ( tx_message_prev[2] !== tx_message_expected_prev[2] )
		&& ((tx_message_expected_prev[2] !== last_tx_message_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[2] = tx_message_expected_prev[2];
	end
	if (
		( tx_message_expected_prev[3] !== 1'bx ) && ( tx_message_prev[3] !== tx_message_expected_prev[3] )
		&& ((tx_message_expected_prev[3] !== last_tx_message_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[3] = tx_message_expected_prev[3];
	end
	if (
		( tx_message_expected_prev[4] !== 1'bx ) && ( tx_message_prev[4] !== tx_message_expected_prev[4] )
		&& ((tx_message_expected_prev[4] !== last_tx_message_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[4] = tx_message_expected_prev[4];
	end
	if (
		( tx_message_expected_prev[5] !== 1'bx ) && ( tx_message_prev[5] !== tx_message_expected_prev[5] )
		&& ((tx_message_expected_prev[5] !== last_tx_message_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[5] = tx_message_expected_prev[5];
	end
	if (
		( tx_message_expected_prev[6] !== 1'bx ) && ( tx_message_prev[6] !== tx_message_expected_prev[6] )
		&& ((tx_message_expected_prev[6] !== last_tx_message_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[6] = tx_message_expected_prev[6];
	end
	if (
		( tx_message_expected_prev[7] !== 1'bx ) && ( tx_message_prev[7] !== tx_message_expected_prev[7] )
		&& ((tx_message_expected_prev[7] !== last_tx_message_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[7] = tx_message_expected_prev[7];
	end
	if (
		( tx_message_expected_prev[8] !== 1'bx ) && ( tx_message_prev[8] !== tx_message_expected_prev[8] )
		&& ((tx_message_expected_prev[8] !== last_tx_message_exp[8]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[8] = tx_message_expected_prev[8];
	end
	if (
		( tx_message_expected_prev[9] !== 1'bx ) && ( tx_message_prev[9] !== tx_message_expected_prev[9] )
		&& ((tx_message_expected_prev[9] !== last_tx_message_exp[9]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[9] = tx_message_expected_prev[9];
	end
	if (
		( tx_message_expected_prev[10] !== 1'bx ) && ( tx_message_prev[10] !== tx_message_expected_prev[10] )
		&& ((tx_message_expected_prev[10] !== last_tx_message_exp[10]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[10] = tx_message_expected_prev[10];
	end
	if (
		( tx_message_expected_prev[11] !== 1'bx ) && ( tx_message_prev[11] !== tx_message_expected_prev[11] )
		&& ((tx_message_expected_prev[11] !== last_tx_message_exp[11]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[11] = tx_message_expected_prev[11];
	end
	if (
		( tx_message_expected_prev[12] !== 1'bx ) && ( tx_message_prev[12] !== tx_message_expected_prev[12] )
		&& ((tx_message_expected_prev[12] !== last_tx_message_exp[12]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[12] = tx_message_expected_prev[12];
	end
	if (
		( tx_message_expected_prev[13] !== 1'bx ) && ( tx_message_prev[13] !== tx_message_expected_prev[13] )
		&& ((tx_message_expected_prev[13] !== last_tx_message_exp[13]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[13] = tx_message_expected_prev[13];
	end
	if (
		( tx_message_expected_prev[14] !== 1'bx ) && ( tx_message_prev[14] !== tx_message_expected_prev[14] )
		&& ((tx_message_expected_prev[14] !== last_tx_message_exp[14]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[14] = tx_message_expected_prev[14];
	end
	if (
		( tx_message_expected_prev[15] !== 1'bx ) && ( tx_message_prev[15] !== tx_message_expected_prev[15] )
		&& ((tx_message_expected_prev[15] !== last_tx_message_exp[15]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[15] = tx_message_expected_prev[15];
	end
	if (
		( tx_message_expected_prev[16] !== 1'bx ) && ( tx_message_prev[16] !== tx_message_expected_prev[16] )
		&& ((tx_message_expected_prev[16] !== last_tx_message_exp[16]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[16] = tx_message_expected_prev[16];
	end
	if (
		( tx_message_expected_prev[17] !== 1'bx ) && ( tx_message_prev[17] !== tx_message_expected_prev[17] )
		&& ((tx_message_expected_prev[17] !== last_tx_message_exp[17]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[17] = tx_message_expected_prev[17];
	end
	if (
		( tx_message_expected_prev[18] !== 1'bx ) && ( tx_message_prev[18] !== tx_message_expected_prev[18] )
		&& ((tx_message_expected_prev[18] !== last_tx_message_exp[18]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[18] = tx_message_expected_prev[18];
	end
	if (
		( tx_message_expected_prev[19] !== 1'bx ) && ( tx_message_prev[19] !== tx_message_expected_prev[19] )
		&& ((tx_message_expected_prev[19] !== last_tx_message_exp[19]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[19] = tx_message_expected_prev[19];
	end
	if (
		( tx_message_expected_prev[20] !== 1'bx ) && ( tx_message_prev[20] !== tx_message_expected_prev[20] )
		&& ((tx_message_expected_prev[20] !== last_tx_message_exp[20]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[20] = tx_message_expected_prev[20];
	end
	if (
		( tx_message_expected_prev[21] !== 1'bx ) && ( tx_message_prev[21] !== tx_message_expected_prev[21] )
		&& ((tx_message_expected_prev[21] !== last_tx_message_exp[21]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[21] = tx_message_expected_prev[21];
	end
	if (
		( tx_message_expected_prev[22] !== 1'bx ) && ( tx_message_prev[22] !== tx_message_expected_prev[22] )
		&& ((tx_message_expected_prev[22] !== last_tx_message_exp[22]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[22] = tx_message_expected_prev[22];
	end
	if (
		( tx_message_expected_prev[23] !== 1'bx ) && ( tx_message_prev[23] !== tx_message_expected_prev[23] )
		&& ((tx_message_expected_prev[23] !== last_tx_message_exp[23]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[23] = tx_message_expected_prev[23];
	end
	if (
		( tx_message_expected_prev[24] !== 1'bx ) && ( tx_message_prev[24] !== tx_message_expected_prev[24] )
		&& ((tx_message_expected_prev[24] !== last_tx_message_exp[24]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[24] = tx_message_expected_prev[24];
	end
	if (
		( tx_message_expected_prev[25] !== 1'bx ) && ( tx_message_prev[25] !== tx_message_expected_prev[25] )
		&& ((tx_message_expected_prev[25] !== last_tx_message_exp[25]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[25] = tx_message_expected_prev[25];
	end
	if (
		( tx_message_expected_prev[26] !== 1'bx ) && ( tx_message_prev[26] !== tx_message_expected_prev[26] )
		&& ((tx_message_expected_prev[26] !== last_tx_message_exp[26]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[26] = tx_message_expected_prev[26];
	end
	if (
		( tx_message_expected_prev[27] !== 1'bx ) && ( tx_message_prev[27] !== tx_message_expected_prev[27] )
		&& ((tx_message_expected_prev[27] !== last_tx_message_exp[27]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[27] = tx_message_expected_prev[27];
	end
	if (
		( tx_message_expected_prev[28] !== 1'bx ) && ( tx_message_prev[28] !== tx_message_expected_prev[28] )
		&& ((tx_message_expected_prev[28] !== last_tx_message_exp[28]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[28] = tx_message_expected_prev[28];
	end
	if (
		( tx_message_expected_prev[29] !== 1'bx ) && ( tx_message_prev[29] !== tx_message_expected_prev[29] )
		&& ((tx_message_expected_prev[29] !== last_tx_message_exp[29]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[29] = tx_message_expected_prev[29];
	end
	if (
		( tx_message_expected_prev[30] !== 1'bx ) && ( tx_message_prev[30] !== tx_message_expected_prev[30] )
		&& ((tx_message_expected_prev[30] !== last_tx_message_exp[30]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[30] = tx_message_expected_prev[30];
	end
	if (
		( tx_message_expected_prev[31] !== 1'bx ) && ( tx_message_prev[31] !== tx_message_expected_prev[31] )
		&& ((tx_message_expected_prev[31] !== last_tx_message_exp[31]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[31] = tx_message_expected_prev[31];
	end
	if (
		( tx_message_expected_prev[32] !== 1'bx ) && ( tx_message_prev[32] !== tx_message_expected_prev[32] )
		&& ((tx_message_expected_prev[32] !== last_tx_message_exp[32]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[32] = tx_message_expected_prev[32];
	end
	if (
		( tx_message_expected_prev[33] !== 1'bx ) && ( tx_message_prev[33] !== tx_message_expected_prev[33] )
		&& ((tx_message_expected_prev[33] !== last_tx_message_exp[33]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[33] = tx_message_expected_prev[33];
	end
	if (
		( tx_message_expected_prev[34] !== 1'bx ) && ( tx_message_prev[34] !== tx_message_expected_prev[34] )
		&& ((tx_message_expected_prev[34] !== last_tx_message_exp[34]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[34] = tx_message_expected_prev[34];
	end
	if (
		( tx_message_expected_prev[35] !== 1'bx ) && ( tx_message_prev[35] !== tx_message_expected_prev[35] )
		&& ((tx_message_expected_prev[35] !== last_tx_message_exp[35]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[35] = tx_message_expected_prev[35];
	end
	if (
		( tx_message_expected_prev[36] !== 1'bx ) && ( tx_message_prev[36] !== tx_message_expected_prev[36] )
		&& ((tx_message_expected_prev[36] !== last_tx_message_exp[36]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[36] = tx_message_expected_prev[36];
	end
	if (
		( tx_message_expected_prev[37] !== 1'bx ) && ( tx_message_prev[37] !== tx_message_expected_prev[37] )
		&& ((tx_message_expected_prev[37] !== last_tx_message_exp[37]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[37] = tx_message_expected_prev[37];
	end
	if (
		( tx_message_expected_prev[38] !== 1'bx ) && ( tx_message_prev[38] !== tx_message_expected_prev[38] )
		&& ((tx_message_expected_prev[38] !== last_tx_message_exp[38]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[38] = tx_message_expected_prev[38];
	end
	if (
		( tx_message_expected_prev[39] !== 1'bx ) && ( tx_message_prev[39] !== tx_message_expected_prev[39] )
		&& ((tx_message_expected_prev[39] !== last_tx_message_exp[39]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[39] = tx_message_expected_prev[39];
	end
	if (
		( tx_message_expected_prev[40] !== 1'bx ) && ( tx_message_prev[40] !== tx_message_expected_prev[40] )
		&& ((tx_message_expected_prev[40] !== last_tx_message_exp[40]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[40] = tx_message_expected_prev[40];
	end
	if (
		( tx_message_expected_prev[41] !== 1'bx ) && ( tx_message_prev[41] !== tx_message_expected_prev[41] )
		&& ((tx_message_expected_prev[41] !== last_tx_message_exp[41]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_message[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_message_expected_prev);
		$display ("     Real value = %b", tx_message_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_tx_message_exp[41] = tx_message_expected_prev[41];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module generalTest_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] baud_target;
reg car_sensor;
reg clk;
reg global_reset;
// wires                                               
wire [6:0] ascii_char;
wire [41:0] ascii_chars;
wire buffer_empty;
wire clk_1hz;
wire clk_baud;
wire [3:0] i_cnt;
wire state;
wire [6:0] tdr;
wire tdr_empty;
wire [1:0] tlc_state;
wire tlc_state_change;
wire [3:0] tlc_timer;
wire [9:0] tsr;
wire tx;
wire [41:0] tx_message;

wire sampler;                             

// assign statements (if any)                          
generalTest i1 (
// port map - connection between master ports and signals/registers   
	.ascii_char(ascii_char),
	.ascii_chars(ascii_chars),
	.baud_target(baud_target),
	.buffer_empty(buffer_empty),
	.car_sensor(car_sensor),
	.clk(clk),
	.clk_1hz(clk_1hz),
	.clk_baud(clk_baud),
	.global_reset(global_reset),
	.i_cnt(i_cnt),
	.state(state),
	.tdr(tdr),
	.tdr_empty(tdr_empty),
	.tlc_state(tlc_state),
	.tlc_state_change(tlc_state_change),
	.tlc_timer(tlc_timer),
	.tsr(tsr),
	.tx(tx),
	.tx_message(tx_message)
);
// baud_target[ 2 ]
initial
begin
	baud_target[2] = 1'b0;
end 
// baud_target[ 1 ]
initial
begin
	baud_target[1] = 1'b0;
end 
// baud_target[ 0 ]
initial
begin
	baud_target[0] = 1'b0;
end 

// global_reset
initial
begin
	global_reset = 1'b1;
	global_reset = #640000 1'b0;
end 

// car_sensor
initial
begin
	car_sensor = 1'b0;
	car_sensor = #3200000 1'b1;
	car_sensor = #640000 1'b0;
	car_sensor = #12160000 1'b1;
	car_sensor = #640000 1'b0;
	car_sensor = #3840000 1'b1;
	car_sensor = #1920000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

generalTest_vlg_sample_tst tb_sample (
	.baud_target(baud_target),
	.car_sensor(car_sensor),
	.clk(clk),
	.global_reset(global_reset),
	.sampler_tx(sampler)
);

generalTest_vlg_check_tst tb_out(
	.ascii_char(ascii_char),
	.ascii_chars(ascii_chars),
	.buffer_empty(buffer_empty),
	.clk_1hz(clk_1hz),
	.clk_baud(clk_baud),
	.i_cnt(i_cnt),
	.state(state),
	.tdr(tdr),
	.tdr_empty(tdr_empty),
	.tlc_state(tlc_state),
	.tlc_state_change(tlc_state_change),
	.tlc_timer(tlc_timer),
	.tsr(tsr),
	.tx(tx),
	.tx_message(tx_message),
	.sampler_rx(sampler)
);
endmodule

