// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2023 09:31:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    uartProject
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uartProject_vlg_sample_tst(
	baud_target,
	car_sensor,
	clk,
	global_reset,
	sampler_tx
);
input [2:0] baud_target;
input  car_sensor;
input  clk;
input  global_reset;
output sampler_tx;

reg sample;
time current_time;
always @(baud_target or car_sensor or clk or global_reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module uartProject_vlg_check_tst (
	clk_1hz,
	clk_baud,
	clk_baud_eighth,
	tlc_timer,
	tx,
	sampler_rx
);
input  clk_1hz;
input  clk_baud;
input  clk_baud_eighth;
input [3:0] tlc_timer;
input  tx;
input sampler_rx;

reg  clk_1hz_expected;
reg  clk_baud_expected;
reg  clk_baud_eighth_expected;
reg [3:0] tlc_timer_expected;
reg  tx_expected;

reg  clk_1hz_prev;
reg  clk_baud_prev;
reg  clk_baud_eighth_prev;
reg [3:0] tlc_timer_prev;
reg  tx_prev;

reg  clk_1hz_expected_prev;
reg  clk_baud_expected_prev;
reg  clk_baud_eighth_expected_prev;
reg [3:0] tlc_timer_expected_prev;
reg  tx_expected_prev;

reg  last_clk_1hz_exp;
reg  last_clk_baud_exp;
reg  last_clk_baud_eighth_exp;
reg [3:0] last_tlc_timer_exp;
reg  last_tx_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	clk_1hz_prev = clk_1hz;
	clk_baud_prev = clk_baud;
	clk_baud_eighth_prev = clk_baud_eighth;
	tlc_timer_prev = tlc_timer;
	tx_prev = tx;
end

// update expected /o prevs

always @(trigger)
begin
	clk_1hz_expected_prev = clk_1hz_expected;
	clk_baud_expected_prev = clk_baud_expected;
	clk_baud_eighth_expected_prev = clk_baud_eighth_expected;
	tlc_timer_expected_prev = tlc_timer_expected;
	tx_expected_prev = tx_expected;
end



// expected clk_1hz
initial
begin
	clk_1hz_expected = 1'bX;
end 

// expected clk_baud
initial
begin
	clk_baud_expected = 1'bX;
end 

// expected clk_baud_eighth
initial
begin
	clk_baud_eighth_expected = 1'bX;
end 
// expected tlc_timer[ 3 ]
initial
begin
	tlc_timer_expected[3] = 1'bX;
end 
// expected tlc_timer[ 2 ]
initial
begin
	tlc_timer_expected[2] = 1'bX;
end 
// expected tlc_timer[ 1 ]
initial
begin
	tlc_timer_expected[1] = 1'bX;
end 
// expected tlc_timer[ 0 ]
initial
begin
	tlc_timer_expected[0] = 1'bX;
end 

// expected tx
initial
begin
	tx_expected = 1'bX;
end 
// generate trigger
always @(clk_1hz_expected or clk_1hz or clk_baud_expected or clk_baud or clk_baud_eighth_expected or clk_baud_eighth or tlc_timer_expected or tlc_timer or tx_expected or tx)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clk_1hz = %b | expected clk_baud = %b | expected clk_baud_eighth = %b | expected tlc_timer = %b | expected tx = %b | ",clk_1hz_expected_prev,clk_baud_expected_prev,clk_baud_eighth_expected_prev,tlc_timer_expected_prev,tx_expected_prev);
	$display("| real clk_1hz = %b | real clk_baud = %b | real clk_baud_eighth = %b | real tlc_timer = %b | real tx = %b | ",clk_1hz_prev,clk_baud_prev,clk_baud_eighth_prev,tlc_timer_prev,tx_prev);
`endif
	if (
		( clk_1hz_expected_prev !== 1'bx ) && ( clk_1hz_prev !== clk_1hz_expected_prev )
		&& ((clk_1hz_expected_prev !== last_clk_1hz_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_1hz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_1hz_expected_prev);
		$display ("     Real value = %b", clk_1hz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clk_1hz_exp = clk_1hz_expected_prev;
	end
	if (
		( clk_baud_expected_prev !== 1'bx ) && ( clk_baud_prev !== clk_baud_expected_prev )
		&& ((clk_baud_expected_prev !== last_clk_baud_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_baud :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_baud_expected_prev);
		$display ("     Real value = %b", clk_baud_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clk_baud_exp = clk_baud_expected_prev;
	end
	if (
		( clk_baud_eighth_expected_prev !== 1'bx ) && ( clk_baud_eighth_prev !== clk_baud_eighth_expected_prev )
		&& ((clk_baud_eighth_expected_prev !== last_clk_baud_eighth_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_baud_eighth :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_baud_eighth_expected_prev);
		$display ("     Real value = %b", clk_baud_eighth_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_clk_baud_eighth_exp = clk_baud_eighth_expected_prev;
	end
	if (
		( tlc_timer_expected_prev[0] !== 1'bx ) && ( tlc_timer_prev[0] !== tlc_timer_expected_prev[0] )
		&& ((tlc_timer_expected_prev[0] !== last_tlc_timer_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tlc_timer[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tlc_timer_expected_prev);
		$display ("     Real value = %b", tlc_timer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tlc_timer_exp[0] = tlc_timer_expected_prev[0];
	end
	if (
		( tlc_timer_expected_prev[1] !== 1'bx ) && ( tlc_timer_prev[1] !== tlc_timer_expected_prev[1] )
		&& ((tlc_timer_expected_prev[1] !== last_tlc_timer_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tlc_timer[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tlc_timer_expected_prev);
		$display ("     Real value = %b", tlc_timer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tlc_timer_exp[1] = tlc_timer_expected_prev[1];
	end
	if (
		( tlc_timer_expected_prev[2] !== 1'bx ) && ( tlc_timer_prev[2] !== tlc_timer_expected_prev[2] )
		&& ((tlc_timer_expected_prev[2] !== last_tlc_timer_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tlc_timer[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tlc_timer_expected_prev);
		$display ("     Real value = %b", tlc_timer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tlc_timer_exp[2] = tlc_timer_expected_prev[2];
	end
	if (
		( tlc_timer_expected_prev[3] !== 1'bx ) && ( tlc_timer_prev[3] !== tlc_timer_expected_prev[3] )
		&& ((tlc_timer_expected_prev[3] !== last_tlc_timer_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tlc_timer[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tlc_timer_expected_prev);
		$display ("     Real value = %b", tlc_timer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tlc_timer_exp[3] = tlc_timer_expected_prev[3];
	end
	if (
		( tx_expected_prev !== 1'bx ) && ( tx_prev !== tx_expected_prev )
		&& ((tx_expected_prev !== last_tx_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_expected_prev);
		$display ("     Real value = %b", tx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tx_exp = tx_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module uartProject_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] baud_target;
reg car_sensor;
reg clk;
reg global_reset;
// wires                                               
wire clk_1hz;
wire clk_baud;
wire clk_baud_eighth;
wire [3:0] tlc_timer;
wire tx;

wire sampler;                             

// assign statements (if any)                          
uartProject i1 (
// port map - connection between master ports and signals/registers   
	.baud_target(baud_target),
	.car_sensor(car_sensor),
	.clk(clk),
	.clk_1hz(clk_1hz),
	.clk_baud(clk_baud),
	.clk_baud_eighth(clk_baud_eighth),
	.global_reset(global_reset),
	.tlc_timer(tlc_timer),
	.tx(tx)
);

// global_reset
initial
begin
	global_reset = 1'b1;
	global_reset = #640000 1'b0;
end 
// baud_target[ 2 ]
initial
begin
	baud_target[2] = 1'b0;
end 
// baud_target[ 1 ]
initial
begin
	baud_target[1] = 1'b0;
end 
// baud_target[ 0 ]
initial
begin
	baud_target[0] = 1'b0;
end 

// car_sensor
initial
begin
	car_sensor = 1'b0;
	car_sensor = #14720000 1'b1;
	car_sensor = #640000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1250 1'b1;
	#1250;
end 

uartProject_vlg_sample_tst tb_sample (
	.baud_target(baud_target),
	.car_sensor(car_sensor),
	.clk(clk),
	.global_reset(global_reset),
	.sampler_tx(sampler)
);

uartProject_vlg_check_tst tb_out(
	.clk_1hz(clk_1hz),
	.clk_baud(clk_baud),
	.clk_baud_eighth(clk_baud_eighth),
	.tlc_timer(tlc_timer),
	.tx(tx),
	.sampler_rx(sampler)
);
endmodule

