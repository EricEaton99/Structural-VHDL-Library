// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2023 14:29:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    generalTest
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module generalTest_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] bus0;
reg bus_ready;
reg clk;
reg clk_baud;
reg global_reset;
// wires                                               
wire [3:0] i_cnt;
wire state_t;
wire [6:0] tdr;
wire tdr_empty_t;
wire [9:0] tsr;
wire tx;

// assign statements (if any)                          
generalTest i1 (
// port map - connection between master ports and signals/registers   
	.bus0(bus0),
	.bus_ready(bus_ready),
	.clk(clk),
	.clk_baud(clk_baud),
	.global_reset(global_reset),
	.i_cnt(i_cnt),
	.state_t(state_t),
	.tdr(tdr),
	.tdr_empty_t(tdr_empty_t),
	.tsr(tsr),
	.tx(tx)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(8)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
	clk = #110000 1'b1;
	# 10000;
	repeat(36)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
end 

// global_reset
initial
begin
	global_reset = 1'b1;
	global_reset = #10000 1'b0;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

