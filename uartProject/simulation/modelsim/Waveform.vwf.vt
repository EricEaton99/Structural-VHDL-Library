// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/27/2023 10:57:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    uartProject
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uartProject_vlg_sample_tst(
	clear,
	clk,
	en,
	j,
	k,
	preset,
	sampler_tx
);
input  clear;
input  clk;
input  en;
input  j;
input  k;
input  preset;
output sampler_tx;

reg sample;
time current_time;
always @(clear or clk or en or j or k or preset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module uartProject_vlg_check_tst (
	q,
	q_not,
	sampler_rx
);
input  q;
input  q_not;
input sampler_rx;

reg  q_expected;
reg  q_not_expected;

reg  q_prev;
reg  q_not_prev;

reg  q_expected_prev;
reg  q_not_expected_prev;

reg  last_q_exp;
reg  last_q_not_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	q_prev = q;
	q_not_prev = q_not;
end

// update expected /o prevs

always @(trigger)
begin
	q_expected_prev = q_expected;
	q_not_expected_prev = q_not_expected;
end



// expected q
initial
begin
	q_expected = 1'bX;
end 

// expected q_not
initial
begin
	q_not_expected = 1'bX;
end 
// generate trigger
always @(q_expected or q or q_not_expected or q_not)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected q = %b | expected q_not = %b | ",q_expected_prev,q_not_expected_prev);
	$display("| real q = %b | real q_not = %b | ",q_prev,q_not_prev);
`endif
	if (
		( q_expected_prev !== 1'bx ) && ( q_prev !== q_expected_prev )
		&& ((q_expected_prev !== last_q_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp = q_expected_prev;
	end
	if (
		( q_not_expected_prev !== 1'bx ) && ( q_not_prev !== q_not_expected_prev )
		&& ((q_not_expected_prev !== last_q_not_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_not :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_not_expected_prev);
		$display ("     Real value = %b", q_not_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_not_exp = q_not_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module uartProject_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clear;
reg clk;
reg en;
reg j;
reg k;
reg preset;
// wires                                               
wire q;
wire q_not;

wire sampler;                             

// assign statements (if any)                          
uartProject i1 (
// port map - connection between master ports and signals/registers   
	.clear(clear),
	.clk(clk),
	.en(en),
	.j(j),
	.k(k),
	.preset(preset),
	.q(q),
	.q_not(q_not)
);

// clear
initial
begin
	clear = 1'b1;
	clear = #20000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// en
initial
begin
	en = 1'b1;
end 

// j
initial
begin
	j = 1'b0;
end 

// k
initial
begin
	k = 1'b0;
end 

// preset
initial
begin
	preset = 1'b0;
end 

uartProject_vlg_sample_tst tb_sample (
	.clear(clear),
	.clk(clk),
	.en(en),
	.j(j),
	.k(k),
	.preset(preset),
	.sampler_tx(sampler)
);

uartProject_vlg_check_tst tb_out(
	.q(q),
	.q_not(q_not),
	.sampler_rx(sampler)
);
endmodule

